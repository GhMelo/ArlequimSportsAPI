// <auto-generated />
using System;
using Infrastructure.Repository;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250628180729_Migration-Instancia-Banco")]
    partial class MigrationInstanciaBanco
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entity.EsporteModalidade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INT");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR(100)");

                    b.HasKey("Id");

                    b.ToTable("EsporteModalidade", (string)null);
                });

            modelBuilder.Entity("Domain.Entity.Pedido", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INT");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DataPedido")
                        .HasColumnType("DATETIME");

                    b.Property<string>("DocumentoCliente")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR(100)");

                    b.Property<string>("EmailCliente")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR(100)");

                    b.Property<int>("StatusPedidoId")
                        .HasColumnType("INT");

                    b.Property<int>("VendedorId")
                        .HasColumnType("INT");

                    b.HasKey("Id");

                    b.HasIndex("StatusPedidoId");

                    b.HasIndex("VendedorId");

                    b.ToTable("Pedido", (string)null);
                });

            modelBuilder.Entity("Domain.Entity.PedidoProduto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INT");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("PedidoId")
                        .HasColumnType("INT");

                    b.Property<int>("ProdutoEstoqueId")
                        .HasColumnType("INT");

                    b.Property<int>("ProdutoId")
                        .HasColumnType("INT");

                    b.Property<int>("Quantidade")
                        .HasColumnType("INT");

                    b.HasKey("Id");

                    b.HasIndex("PedidoId");

                    b.HasIndex("ProdutoEstoqueId");

                    b.HasIndex("ProdutoId");

                    b.ToTable("PedidoProduto", (string)null);
                });

            modelBuilder.Entity("Domain.Entity.ProdutoEstoque", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INT");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DataEntrada")
                        .HasColumnType("DATETIME");

                    b.Property<string>("NotaFiscal")
                        .IsRequired()
                        .HasColumnType("VARCHAR(100)");

                    b.Property<int>("ProdutoId")
                        .HasColumnType("INT");

                    b.Property<int>("Quantidade")
                        .HasColumnType("INT");

                    b.HasKey("Id");

                    b.HasIndex("ProdutoId");

                    b.ToTable("ProdutoEstoque", (string)null);
                });

            modelBuilder.Entity("Domain.Entity.ProdutoEstoqueMovimentacao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INT");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DataMovimentacao")
                        .HasColumnType("DATETIME");

                    b.Property<int>("IdUsuario")
                        .HasColumnType("INT");

                    b.Property<int>("ProdutoEstoqueId")
                        .HasColumnType("INT");

                    b.Property<int>("Quantidade")
                        .HasColumnType("INT");

                    b.Property<int>("TipoOperacaoId")
                        .HasColumnType("INT");

                    b.HasKey("Id");

                    b.HasIndex("IdUsuario");

                    b.HasIndex("ProdutoEstoqueId");

                    b.HasIndex("TipoOperacaoId");

                    b.ToTable("ProdutoEstoqueMovimentacao", (string)null);
                });

            modelBuilder.Entity("Domain.Entity.StatusPedido", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INT");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)");

                    b.HasKey("Id");

                    b.ToTable("StatusPedido", (string)null);
                });

            modelBuilder.Entity("Domain.Entity.TipoOperacao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INT");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)");

                    b.HasKey("Id");

                    b.ToTable("TipoOperacao", (string)null);
                });

            modelBuilder.Entity("Domain.Entity.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INT");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR(100)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR(100)");

                    b.Property<string>("Senha")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR(255)");

                    b.Property<int>("Tipo")
                        .HasColumnType("INT")
                        .HasColumnName("TipoUsuario");

                    b.HasKey("Id");

                    b.ToTable("Usuario", null, t =>
                        {
                            t.HasCheckConstraint("CK_Usuario_EmailValido", "[Email] LIKE '%@%' AND [Email] LIKE '%.%'");

                            t.HasCheckConstraint("CK_Usuario_SenhaMinima", "LEN([Senha]) >= 8");
                        });
                });

            modelBuilder.Entity("Produto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INT");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR(255)");

                    b.Property<int>("EsporteModalidadeId")
                        .HasColumnType("INT");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR(100)");

                    b.Property<double>("Preco")
                        .HasColumnType("FLOAT");

                    b.HasKey("Id");

                    b.HasIndex("EsporteModalidadeId");

                    b.ToTable("Produto", (string)null);
                });

            modelBuilder.Entity("Domain.Entity.Pedido", b =>
                {
                    b.HasOne("Domain.Entity.StatusPedido", "StatusPedido")
                        .WithMany()
                        .HasForeignKey("StatusPedidoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entity.Usuario", "Vendedor")
                        .WithMany("PedidosRealizados")
                        .HasForeignKey("VendedorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StatusPedido");

                    b.Navigation("Vendedor");
                });

            modelBuilder.Entity("Domain.Entity.PedidoProduto", b =>
                {
                    b.HasOne("Domain.Entity.Pedido", "Pedido")
                        .WithMany("PedidoProduto")
                        .HasForeignKey("PedidoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entity.ProdutoEstoque", "ProdutoEstoque")
                        .WithMany()
                        .HasForeignKey("ProdutoEstoqueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Produto", "Produto")
                        .WithMany("PedidoProduto")
                        .HasForeignKey("ProdutoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Pedido");

                    b.Navigation("Produto");

                    b.Navigation("ProdutoEstoque");
                });

            modelBuilder.Entity("Domain.Entity.ProdutoEstoque", b =>
                {
                    b.HasOne("Produto", "Produto")
                        .WithMany("ProdutoEstoque")
                        .HasForeignKey("ProdutoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Produto");
                });

            modelBuilder.Entity("Domain.Entity.ProdutoEstoqueMovimentacao", b =>
                {
                    b.HasOne("Domain.Entity.Usuario", "Usuario")
                        .WithMany("ProdutoEstoqueMovimentacao")
                        .HasForeignKey("IdUsuario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entity.ProdutoEstoque", "ProdutoEstoque")
                        .WithMany()
                        .HasForeignKey("ProdutoEstoqueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entity.TipoOperacao", "TipoOperacao")
                        .WithMany()
                        .HasForeignKey("TipoOperacaoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProdutoEstoque");

                    b.Navigation("TipoOperacao");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Produto", b =>
                {
                    b.HasOne("Domain.Entity.EsporteModalidade", "EsporteModalidade")
                        .WithMany()
                        .HasForeignKey("EsporteModalidadeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EsporteModalidade");
                });

            modelBuilder.Entity("Domain.Entity.Pedido", b =>
                {
                    b.Navigation("PedidoProduto");
                });

            modelBuilder.Entity("Domain.Entity.Usuario", b =>
                {
                    b.Navigation("PedidosRealizados");

                    b.Navigation("ProdutoEstoqueMovimentacao");
                });

            modelBuilder.Entity("Produto", b =>
                {
                    b.Navigation("PedidoProduto");

                    b.Navigation("ProdutoEstoque");
                });
#pragma warning restore 612, 618
        }
    }
}
